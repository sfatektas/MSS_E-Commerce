// <auto-generated />
using System;
using E_Commerce.DataAccess.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace E_Commerce.DataAccess.Migrations
{
    [DbContext(typeof(E_CommerceDbContext))]
    [Migration("20230605120600_favoriteProductFixxed")]
    partial class favoriteProductFixxed
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("E_Commerce.Entities.EFCore.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Defination")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("Defination");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("E_Commerce.Entities.EFCore.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Defination")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Defination = "TShirt",
                            IsActive = true
                        },
                        new
                        {
                            Id = 2,
                            Defination = "Pantalon",
                            IsActive = true
                        },
                        new
                        {
                            Id = 3,
                            Defination = "Ayakkabı",
                            IsActive = true
                        },
                        new
                        {
                            Id = 4,
                            Defination = "Gömlek",
                            IsActive = true
                        },
                        new
                        {
                            Id = 5,
                            Defination = "Bluz",
                            IsActive = true
                        });
                });

            modelBuilder.Entity("E_Commerce.Entities.EFCore.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Defination")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.ToTable("Colors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Defination = "Beyaz",
                            IsActive = true
                        },
                        new
                        {
                            Id = 2,
                            Defination = "Siyah",
                            IsActive = true
                        },
                        new
                        {
                            Id = 3,
                            Defination = "Gri",
                            IsActive = true
                        },
                        new
                        {
                            Id = 4,
                            Defination = "Kahverengi",
                            IsActive = true
                        },
                        new
                        {
                            Id = 5,
                            Defination = "Kırmızı",
                            IsActive = true
                        },
                        new
                        {
                            Id = 6,
                            Defination = "Mavi",
                            IsActive = true
                        },
                        new
                        {
                            Id = 7,
                            Defination = "Yeşil",
                            IsActive = true
                        },
                        new
                        {
                            Id = 8,
                            Defination = "Sarı",
                            IsActive = true
                        },
                        new
                        {
                            Id = 9,
                            Defination = "Turuncu",
                            IsActive = true
                        },
                        new
                        {
                            Id = 10,
                            Defination = "Pembe",
                            IsActive = true
                        },
                        new
                        {
                            Id = 11,
                            Defination = "Mor",
                            IsActive = true
                        },
                        new
                        {
                            Id = 12,
                            Defination = "Lacivert",
                            IsActive = true
                        });
                });

            modelBuilder.Entity("E_Commerce.Entities.EFCore.CustomerAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AddressDefination")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("SelectedAddress")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Town")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomersAddresses");
                });

            modelBuilder.Entity("E_Commerce.Entities.EFCore.FavoriteProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ProductsInStockId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductsInStockId", "CustomerId");

                    b.ToTable("FavoriteProducts");
                });

            modelBuilder.Entity("E_Commerce.Entities.EFCore.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Defination")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.ToTable("Genders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Defination = "Erkek",
                            IsActive = true
                        },
                        new
                        {
                            Id = 2,
                            Defination = "Kadın",
                            IsActive = true
                        },
                        new
                        {
                            Id = 3,
                            Defination = "Belirtmek İstemiyorum",
                            IsActive = true
                        });
                });

            modelBuilder.Entity("E_Commerce.Entities.EFCore.Identities.AppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "c38132ae-b5f6-4eb7-9d97-773280a1fe57",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "2076d41b-b76a-406d-b959-7701e8686d6b",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = "7e674d3e-cef5-4c08-a4de-f041d7c73b10",
                            Name = "Supplier",
                            NormalizedName = "SUPPLIER"
                        });
                });

            modelBuilder.Entity("E_Commerce.Entities.EFCore.Identities.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<int>("DiscriminatorUserType")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<int>("UserTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("UserTypeId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<int>("DiscriminatorUserType").HasValue(0);
                });

            modelBuilder.Entity("E_Commerce.Entities.EFCore.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AddressDetail")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("OrderStatusTypeId")
                        .HasColumnType("int");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("double");

                    b.Property<string>("Town")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderStatusTypeId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("E_Commerce.Entities.EFCore.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierProductId")
                        .HasColumnType("int");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("double");

                    b.Property<double>("UnitPrice")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("SupplierProductId");

                    b.HasIndex("OrderId", "SupplierProductId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("E_Commerce.Entities.EFCore.OrderStatusType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Defination")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.ToTable("OrderStatusTypes");
                });

            modelBuilder.Entity("E_Commerce.Entities.EFCore.PriceHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("NewPrice")
                        .HasColumnType("double");

                    b.Property<double>("OldPrice")
                        .HasColumnType("double");

                    b.Property<int>("SupplierProductsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SupplierProductsId");

                    b.ToTable("PriceHistory");
                });

            modelBuilder.Entity("E_Commerce.Entities.EFCore.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Detail")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("SizeTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SizeTypeId");

                    b.HasIndex("BrandId", "Name");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("E_Commerce.Entities.EFCore.ProductComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Point")
                        .HasColumnType("int");

                    b.Property<int>("ProductsInStockId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductsInStockId");

                    b.ToTable("ProductComments");
                });

            modelBuilder.Entity("E_Commerce.Entities.EFCore.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("SupplierProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SupplierProductId");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("E_Commerce.Entities.EFCore.ProductsInStock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("Amount")
                        .HasColumnType("double");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsFavoriteProduct")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("SupplierProductId")
                        .HasColumnType("int");

                    b.Property<double>("UnitPrice")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("SupplierProductId")
                        .IsUnique();

                    b.ToTable("ProductsInStocks");
                });

            modelBuilder.Entity("E_Commerce.Entities.EFCore.ProductsVisitor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("SupplierProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("VisitDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("SupplierProductId");

                    b.ToTable("ProductsVisitors");
                });

            modelBuilder.Entity("E_Commerce.Entities.EFCore.SiteOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FacebookLink")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("InstagramLink")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<string>("LinkedInLink")
                        .HasColumnType("longtext");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Slogan")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("varchar(350)");

                    b.Property<string>("TwitterLink")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.ToTable("SiteOptions");
                });

            modelBuilder.Entity("E_Commerce.Entities.EFCore.Size", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("SizeTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("SizeTypeId");

                    b.ToTable("Sizes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsActive = true,
                            SizeTypeId = 1,
                            Value = "Small"
                        },
                        new
                        {
                            Id = 2,
                            IsActive = true,
                            SizeTypeId = 1,
                            Value = "Medium"
                        },
                        new
                        {
                            Id = 3,
                            IsActive = true,
                            SizeTypeId = 1,
                            Value = "Large"
                        },
                        new
                        {
                            Id = 4,
                            IsActive = true,
                            SizeTypeId = 1,
                            Value = "XXL"
                        },
                        new
                        {
                            Id = 5,
                            IsActive = true,
                            SizeTypeId = 1,
                            Value = "XXXL"
                        },
                        new
                        {
                            Id = 6,
                            IsActive = true,
                            SizeTypeId = 2,
                            Value = "29 30"
                        },
                        new
                        {
                            Id = 7,
                            IsActive = true,
                            SizeTypeId = 2,
                            Value = "29 31"
                        },
                        new
                        {
                            Id = 8,
                            IsActive = true,
                            SizeTypeId = 2,
                            Value = "29 32"
                        },
                        new
                        {
                            Id = 9,
                            IsActive = true,
                            SizeTypeId = 2,
                            Value = "30 31"
                        },
                        new
                        {
                            Id = 10,
                            IsActive = true,
                            SizeTypeId = 2,
                            Value = "30 32"
                        },
                        new
                        {
                            Id = 11,
                            IsActive = true,
                            SizeTypeId = 3,
                            Value = "36"
                        },
                        new
                        {
                            Id = 12,
                            IsActive = true,
                            SizeTypeId = 3,
                            Value = "37"
                        },
                        new
                        {
                            Id = 13,
                            IsActive = true,
                            SizeTypeId = 3,
                            Value = "38"
                        },
                        new
                        {
                            Id = 14,
                            IsActive = true,
                            SizeTypeId = 3,
                            Value = "39"
                        },
                        new
                        {
                            Id = 15,
                            IsActive = true,
                            SizeTypeId = 3,
                            Value = "40"
                        },
                        new
                        {
                            Id = 16,
                            IsActive = true,
                            SizeTypeId = 3,
                            Value = "41"
                        },
                        new
                        {
                            Id = 17,
                            IsActive = true,
                            SizeTypeId = 3,
                            Value = "41.5"
                        },
                        new
                        {
                            Id = 18,
                            IsActive = true,
                            SizeTypeId = 3,
                            Value = "42"
                        },
                        new
                        {
                            Id = 19,
                            IsActive = true,
                            SizeTypeId = 3,
                            Value = "42.5"
                        },
                        new
                        {
                            Id = 20,
                            IsActive = true,
                            SizeTypeId = 3,
                            Value = "43"
                        });
                });

            modelBuilder.Entity("E_Commerce.Entities.EFCore.SizeType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Defination")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.ToTable("SizeTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Defination = "Üst Giyim",
                            IsActive = true
                        },
                        new
                        {
                            Id = 2,
                            Defination = "Alt Giyim",
                            IsActive = true
                        },
                        new
                        {
                            Id = 3,
                            Defination = "Ayak Numarası",
                            IsActive = true
                        });
                });

            modelBuilder.Entity("E_Commerce.Entities.EFCore.Slider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Sliders");
                });

            modelBuilder.Entity("E_Commerce.Entities.EFCore.SliderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ButtonLink")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("ButtonText")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("SliderId")
                        .HasColumnType("int");

                    b.Property<string>("SubTitle")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.HasKey("Id");

                    b.HasIndex("SliderId");

                    b.ToTable("SliderItem");
                });

            modelBuilder.Entity("E_Commerce.Entities.EFCore.SupplierAddingProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("SupplierProductId")
                        .HasColumnType("int");

                    b.Property<double>("UnitPrice")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("SupplierProductId");

                    b.ToTable("SuppliersAddingProducts");
                });

            modelBuilder.Entity("E_Commerce.Entities.EFCore.SupplierProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ColorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CustomProductDefination")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("CustomProductTitle")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("SizeId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<double>("UnitPrice")
                        .HasColumnType("double");

                    b.Property<int>("VisitCounter")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ColorId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SizeId");

                    b.HasIndex("SupplierId", "ProductId", "SizeId", "ColorId")
                        .IsUnique();

                    b.ToTable("SuppliersProducts");
                });

            modelBuilder.Entity("E_Commerce.Entities.EFCore.UserType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Defination")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.ToTable("UserTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Defination = "Admin",
                            IsActive = true
                        },
                        new
                        {
                            Id = 2,
                            Defination = "Customer",
                            IsActive = true
                        },
                        new
                        {
                            Id = 3,
                            Defination = "Supplier",
                            IsActive = true
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("E_Commerce.Entities.EFCore.Identities.Admin", b =>
                {
                    b.HasBaseType("E_Commerce.Entities.EFCore.Identities.AppUser");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("E_Commerce.Entities.EFCore.Identities.Customer", b =>
                {
                    b.HasBaseType("E_Commerce.Entities.EFCore.Identities.AppUser");

                    b.Property<double>("CurrentPoint")
                        .HasColumnType("double");

                    b.Property<double>("EarnedPoint")
                        .HasColumnType("double");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext")
                        .HasColumnName("Customer_FirstName");

                    b.Property<int>("GenderId")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext");

                    b.HasIndex("GenderId");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("E_Commerce.Entities.EFCore.Identities.Supplier", b =>
                {
                    b.HasBaseType("E_Commerce.Entities.EFCore.Identities.AppUser");

                    b.Property<string>("CompanyDetail")
                        .HasColumnType("longtext");

                    b.Property<string>("CompanyName")
                        .HasColumnType("longtext");

                    b.Property<double>("CompanyPoint")
                        .HasColumnType("double");

                    b.Property<string>("CompanyUserName")
                        .HasColumnType("longtext");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("longtext");

                    b.HasDiscriminator().HasValue(3);
                });

            modelBuilder.Entity("E_Commerce.Entities.EFCore.CustomerAddress", b =>
                {
                    b.HasOne("E_Commerce.Entities.EFCore.Identities.Customer", "Customer")
                        .WithMany("CustomerAddresses")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("E_Commerce.Entities.EFCore.FavoriteProduct", b =>
                {
                    b.HasOne("E_Commerce.Entities.EFCore.Identities.Customer", "Customer")
                        .WithMany("FavoriteProducts")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_Commerce.Entities.EFCore.ProductsInStock", "ProductsInStock")
                        .WithMany("FavoriteProducts")
                        .HasForeignKey("ProductsInStockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("ProductsInStock");
                });

            modelBuilder.Entity("E_Commerce.Entities.EFCore.Identities.AppUser", b =>
                {
                    b.HasOne("E_Commerce.Entities.EFCore.UserType", "UserType")
                        .WithMany("AppUsers")
                        .HasForeignKey("UserTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserType");
                });

            modelBuilder.Entity("E_Commerce.Entities.EFCore.Order", b =>
                {
                    b.HasOne("E_Commerce.Entities.EFCore.Identities.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_Commerce.Entities.EFCore.OrderStatusType", "OrderStatusType")
                        .WithMany("Orders")
                        .HasForeignKey("OrderStatusTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("OrderStatusType");
                });

            modelBuilder.Entity("E_Commerce.Entities.EFCore.OrderDetail", b =>
                {
                    b.HasOne("E_Commerce.Entities.EFCore.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_Commerce.Entities.EFCore.SupplierProduct", "SupplierProduct")
                        .WithMany("OrderDetails")
                        .HasForeignKey("SupplierProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("SupplierProduct");
                });

            modelBuilder.Entity("E_Commerce.Entities.EFCore.PriceHistory", b =>
                {
                    b.HasOne("E_Commerce.Entities.EFCore.SupplierProduct", "SupplierProducts")
                        .WithMany("PriceHistories")
                        .HasForeignKey("SupplierProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SupplierProducts");
                });

            modelBuilder.Entity("E_Commerce.Entities.EFCore.Product", b =>
                {
                    b.HasOne("E_Commerce.Entities.EFCore.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_Commerce.Entities.EFCore.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_Commerce.Entities.EFCore.SizeType", "SizeType")
                        .WithMany()
                        .HasForeignKey("SizeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Category");

                    b.Navigation("SizeType");
                });

            modelBuilder.Entity("E_Commerce.Entities.EFCore.ProductComment", b =>
                {
                    b.HasOne("E_Commerce.Entities.EFCore.Identities.Customer", "Customer")
                        .WithMany("ProductComments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_Commerce.Entities.EFCore.ProductsInStock", "ProductsInStock")
                        .WithMany("ProductComments")
                        .HasForeignKey("ProductsInStockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("ProductsInStock");
                });

            modelBuilder.Entity("E_Commerce.Entities.EFCore.ProductImage", b =>
                {
                    b.HasOne("E_Commerce.Entities.EFCore.SupplierProduct", "SupplierProducts")
                        .WithMany("ProductImages")
                        .HasForeignKey("SupplierProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SupplierProducts");
                });

            modelBuilder.Entity("E_Commerce.Entities.EFCore.ProductsInStock", b =>
                {
                    b.HasOne("E_Commerce.Entities.EFCore.SupplierProduct", "SupplierProduct")
                        .WithOne("ProductsInStock")
                        .HasForeignKey("E_Commerce.Entities.EFCore.ProductsInStock", "SupplierProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SupplierProduct");
                });

            modelBuilder.Entity("E_Commerce.Entities.EFCore.ProductsVisitor", b =>
                {
                    b.HasOne("E_Commerce.Entities.EFCore.Identities.Customer", "Customer")
                        .WithMany("ProductsVisitors")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_Commerce.Entities.EFCore.SupplierProduct", "SupplierProducts")
                        .WithMany("ProductsVisitors")
                        .HasForeignKey("SupplierProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("SupplierProducts");
                });

            modelBuilder.Entity("E_Commerce.Entities.EFCore.Size", b =>
                {
                    b.HasOne("E_Commerce.Entities.EFCore.SizeType", "SizeType")
                        .WithMany("Sizes")
                        .HasForeignKey("SizeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SizeType");
                });

            modelBuilder.Entity("E_Commerce.Entities.EFCore.SliderItem", b =>
                {
                    b.HasOne("E_Commerce.Entities.EFCore.Slider", "Slider")
                        .WithMany("SliderItems")
                        .HasForeignKey("SliderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Slider");
                });

            modelBuilder.Entity("E_Commerce.Entities.EFCore.SupplierAddingProduct", b =>
                {
                    b.HasOne("E_Commerce.Entities.EFCore.SupplierProduct", "SupplierProducts")
                        .WithMany("SupplierAddingProducts")
                        .HasForeignKey("SupplierProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SupplierProducts");
                });

            modelBuilder.Entity("E_Commerce.Entities.EFCore.SupplierProduct", b =>
                {
                    b.HasOne("E_Commerce.Entities.EFCore.Color", "Color")
                        .WithMany("SupplierProducts")
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_Commerce.Entities.EFCore.Product", "Product")
                        .WithMany("SupplierProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_Commerce.Entities.EFCore.Size", "Size")
                        .WithMany("SupplierProducts")
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_Commerce.Entities.EFCore.Identities.Supplier", "Supplier")
                        .WithMany("SupplierProducts")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Color");

                    b.Navigation("Product");

                    b.Navigation("Size");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("E_Commerce.Entities.EFCore.Identities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("E_Commerce.Entities.EFCore.Identities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("E_Commerce.Entities.EFCore.Identities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("E_Commerce.Entities.EFCore.Identities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_Commerce.Entities.EFCore.Identities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("E_Commerce.Entities.EFCore.Identities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("E_Commerce.Entities.EFCore.Identities.Customer", b =>
                {
                    b.HasOne("E_Commerce.Entities.EFCore.Gender", "Gender")
                        .WithMany("Customers")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("E_Commerce.Entities.EFCore.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("E_Commerce.Entities.EFCore.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("E_Commerce.Entities.EFCore.Color", b =>
                {
                    b.Navigation("SupplierProducts");
                });

            modelBuilder.Entity("E_Commerce.Entities.EFCore.Gender", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("E_Commerce.Entities.EFCore.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("E_Commerce.Entities.EFCore.OrderStatusType", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("E_Commerce.Entities.EFCore.Product", b =>
                {
                    b.Navigation("SupplierProducts");
                });

            modelBuilder.Entity("E_Commerce.Entities.EFCore.ProductsInStock", b =>
                {
                    b.Navigation("FavoriteProducts");

                    b.Navigation("ProductComments");
                });

            modelBuilder.Entity("E_Commerce.Entities.EFCore.Size", b =>
                {
                    b.Navigation("SupplierProducts");
                });

            modelBuilder.Entity("E_Commerce.Entities.EFCore.SizeType", b =>
                {
                    b.Navigation("Sizes");
                });

            modelBuilder.Entity("E_Commerce.Entities.EFCore.Slider", b =>
                {
                    b.Navigation("SliderItems");
                });

            modelBuilder.Entity("E_Commerce.Entities.EFCore.SupplierProduct", b =>
                {
                    b.Navigation("OrderDetails");

                    b.Navigation("PriceHistories");

                    b.Navigation("ProductImages");

                    b.Navigation("ProductsInStock");

                    b.Navigation("ProductsVisitors");

                    b.Navigation("SupplierAddingProducts");
                });

            modelBuilder.Entity("E_Commerce.Entities.EFCore.UserType", b =>
                {
                    b.Navigation("AppUsers");
                });

            modelBuilder.Entity("E_Commerce.Entities.EFCore.Identities.Customer", b =>
                {
                    b.Navigation("CustomerAddresses");

                    b.Navigation("FavoriteProducts");

                    b.Navigation("Orders");

                    b.Navigation("ProductComments");

                    b.Navigation("ProductsVisitors");
                });

            modelBuilder.Entity("E_Commerce.Entities.EFCore.Identities.Supplier", b =>
                {
                    b.Navigation("SupplierProducts");
                });
#pragma warning restore 612, 618
        }
    }
}
